---
interface Props {
  variant?: 'primary' | 'secondary' | 'outline';
  size?: 'sm' | 'md' | 'lg';
  href?: string;
  type?: 'button' | 'submit' | 'reset';
  class?: string;
  loading?: boolean;
  fullWidth?: boolean;
}

const { 
  variant = 'primary', 
  size = 'md', 
  href, 
  type = 'button',
  class: className = '',
  loading = false,
  fullWidth = false,
  ...props 
} = Astro.props;

const baseClasses = 'btn-base inline-flex items-center justify-center font-medium transition-all duration-150 ease-out focus-visible:outline-2 focus-visible:outline-primary-blue focus-visible:outline-offset-2 disabled:opacity-50 disabled:cursor-not-allowed';

const variantClasses = {
  primary: 'bg-primary-blue text-white hover:bg-primary-blue-hover hover:-translate-y-0.5 active:translate-y-0',
  secondary: 'bg-light-bg-secondary text-light-text-primary hover:bg-light-bg-hover dark:bg-dark-bg-secondary dark:text-dark-text-primary dark:hover:bg-dark-bg-hover',
  outline: 'border-2 border-primary-blue text-primary-blue hover:bg-primary-blue hover:text-white dark:border-primary-blue dark:text-primary-blue'
};

const sizeClasses = {
  sm: 'px-3 py-1.5 text-sm',
  md: 'px-6 py-3 text-base',
  lg: 'px-8 py-4 text-lg'
};

const widthClasses = fullWidth ? 'w-full' : '';

const classes = `${baseClasses} ${variantClasses[variant]} ${sizeClasses[size]} ${widthClasses} ${className}`.trim();

const Tag = href ? 'a' : 'button';
---

<Tag 
  class={classes}
  href={href}
  type={href ? undefined : type}
  disabled={loading}
  {...props}
>
  {loading && (
    <svg class="animate-spin -ml-1 mr-3 h-5 w-5" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
      <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
      <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
    </svg>
  )}
  <slot />
</Tag>